import React, { useEffect, useState } from "react";

function App() {
  const [permissionStatus, setPermissionStatus] = useState("default");
  const [isMobile, setIsMobile] = useState(false);
  const [isIOS, setIsIOS] = useState(false);
  const [notificationSupported, setNotificationSupported] = useState(false);
  const [error, setError] = useState(null);
  const [serviceWorkerSupported, setServiceWorkerSupported] = useState(false);

  useEffect(() => {
    try {
      const userAgent = navigator.userAgent || "";
      const mobile =
        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
          userAgent
        );
      const iOS = /iPad|iPhone|iPod/.test(userAgent) && !window.MSStream;

      setIsMobile(mobile);
      setIsIOS(iOS);

      // Ki·ªÉm tra h·ªó tr·ª£ notification API (kh√¥ng bao g·ªìm iOS Safari)
      const supported =
        typeof Notification !== "undefined" &&
        typeof Notification.requestPermission === "function" &&
        !iOS; // iOS Safari kh√¥ng h·ªó tr·ª£ Web Notifications th√¥ng th∆∞·ªùng

      setNotificationSupported(supported);

      // Ki·ªÉm tra h·ªó tr·ª£ Service Worker API
      const swSupported = "serviceWorker" in navigator;
      setServiceWorkerSupported(swSupported);

      // C·∫≠p nh·∫≠t permission status an to√†n
      if (typeof Notification !== "undefined") {
        setPermissionStatus(Notification.permission || "default");
      }

      console.log("Device info:", {
        mobile,
        iOS,
        supported,
        swSupported,
        userAgent,
        notificationAPI: typeof Notification !== "undefined",
        currentPermission: Notification.permission,
      });
    } catch (err) {
      console.error("Error in useEffect:", err);
      setError(err.message);
    }
  }, []);

  const requestPermission = async () => {
    // N·∫øu l√† iOS, b√°o kh√¥ng h·ªó tr·ª£ th√¥ng b√°o ƒë·∫©y web
    if (isIOS) {
      alert("iOS Safari kh√¥ng h·ªó tr·ª£ Web Notifications th√¥ng th∆∞·ªùng.");
      return "denied";
    }

    if (!notificationSupported) {
      alert("Tr√¨nh duy·ªát/thi·∫øt b·ªã n√†y kh√¥ng h·ªó tr·ª£ Web Notifications.");
      return "denied";
    }

    console.log("Requesting permission...");
    try {
      const permission = await Notification.requestPermission();
      console.log("Permission result:", permission);
      setPermissionStatus(permission);
      return permission;
    } catch (error) {
      console.error("Error requesting permission:", error);
      setError("L·ªói khi xin quy·ªÅn: " + error.message);
      return "denied";
    }
  };

  const showNotificationViaServiceWorker = (title, body, icon, tag) => {
    if (!serviceWorkerSupported) {
      alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Service Worker.");
      return;
    }
    if (Notification.permission !== "granted") {
      alert("Quy·ªÅn th√¥ng b√°o ch∆∞a ƒë∆∞·ª£c c·∫•p.");
      return;
    }

    if (navigator.serviceWorker.controller) {
      navigator.serviceWorker.controller.postMessage({
        type: "DISPLAY_NOTIFICATION",
        title,
        body,
        icon,
        tag,
      });
      console.log("ƒê√£ g·ª≠i y√™u c·∫ßu hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫øn Service Worker.");
    } else {
      alert(
        "Service Worker ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t. Vui l√≤ng t·∫£i l·∫°i trang ho·∫∑c ƒë·ª£i SW c√†i ƒë·∫∑t xong."
      );
      console.warn("Ch∆∞a c√≥ Service Worker n√†o ƒë∆∞·ª£c k√≠ch ho·∫°t.");
    }
  };

  const testSimpleNotification = async () => {
    // N·∫øu l√† iOS, b√°o kh√¥ng h·ªó tr·ª£ th√¥ng b√°o ƒë·∫©y web
    if (isIOS) {
      alert("iOS Safari kh√¥ng h·ªó tr·ª£ Web Notifications th√¥ng th∆∞·ªùng.");
      return;
    }

    if (!notificationSupported) {
      alert("Thi·∫øt b·ªã n√†y kh√¥ng h·ªó tr·ª£ Web Notifications.");
      return;
    }

    console.log("Testing simple notification...");
    console.log("Current permission:", Notification.permission);

    // Ki·ªÉm tra quy·ªÅn tr∆∞·ªõc khi t·∫°o th√¥ng b√°o
    if (Notification.permission === "granted") {
      console.log(
        "Permission granted, attempting to display notification via Service Worker..."
      );
      showNotificationViaServiceWorker(
        "Th√¥ng b√°o Test",
        "ƒê√¢y l√† th√¥ng b√°o ƒë∆°n gi·∫£n t·ª´ React App!",
        "https://via.placeholder.com/64?text=NT",
        "simple-test-notification"
      );
    } else if (Notification.permission === "denied") {
      alert(
        "Quy·ªÅn th√¥ng b√°o ƒë√£ b·ªã t·ª´ ch·ªëi. Vui l√≤ng c·∫•p quy·ªÅn trong c√†i ƒë·∫∑t tr√¨nh duy·ªát."
      );
    } else {
      // permission === "default"
      console.log("Permission not granted, requesting...");
      const permission = await requestPermission();
      if (permission === "granted") {
        testSimpleNotification(); // Th·ª≠ l·∫°i n·∫øu quy·ªÅn ƒë∆∞·ª£c c·∫•p
      } else {
        alert("Kh√¥ng th·ªÉ t·∫°o th√¥ng b√°o v√¨ quy·ªÅn ch∆∞a ƒë∆∞·ª£c c·∫•p.");
      }
    }
  };

  const testMinimalNotification = async () => {
    if (isIOS) {
      alert("iOS Safari kh√¥ng h·ªó tr·ª£ Web Notifications th√¥ng th∆∞·ªùng.");
      return;
    }
    if (!notificationSupported) {
      alert("Thi·∫øt b·ªã n√†y kh√¥ng h·ªó tr·ª£ Web Notifications.");
      return;
    }

    if (Notification.permission === "granted") {
      showNotificationViaServiceWorker(
        "URGENT TEST!",
        "ƒê√¢y l√† m·ªôt th√¥ng b√°o t·ªëi thi·ªÉu.",
        "https://via.placeholder.com/64?text=MIN",
        "minimal-test-notification"
      );
    } else if (Notification.permission === "denied") {
      alert("Quy·ªÅn th√¥ng b√°o ƒë√£ b·ªã t·ª´ ch·ªëi.");
    } else {
      alert("Kh√¥ng th·ªÉ t·∫°o notification. Vui l√≤ng c·∫•p quy·ªÅn tr∆∞·ªõc.");
    }
  };

  // H√†m n√†y ƒë·ªÉ m√¥ ph·ªèng Push Notification b·∫±ng Service Worker.
  // ƒê·ªÇ C√ÅI N√ÄY TH·ª∞C S·ª∞ HO·∫†T ƒê·ªòNG, B·∫†N C·∫¶N:
  // 1. M·ªôt Service Worker file (v√≠ d·ª•: sw.js) ƒë∆∞·ª£c ƒëƒÉng k√Ω. (ƒê√£ l√†m ·ªü tr√™n)
  // 2. M·ªôt backend server ƒë·ªÉ g·ª≠i Web Push Protocol ƒë·∫øn Service Worker. (Ch∆∞a l√†m)
  // 3. Ng∆∞·ªùi d√πng ph·∫£i c·∫•p quy·ªÅn cho Push API. (ƒê√£ l√†m v·ªõi Notification.requestPermission)
  const testReactPushNotification = async () => {
    if (isIOS && !serviceWorkerSupported) {
      alert(
        "iOS Safari kh√¥ng h·ªó tr·ª£ Web Notifications th√¥ng th∆∞·ªùng. ƒê·ªÉ nh·∫≠n Push Notifications tr√™n iOS, c·∫ßn s·ª≠ d·ª•ng Service Worker v√† APNs (Apple Push Notification service), r·∫•t ph·ª©c t·∫°p."
      );
      return;
    }
    if (!serviceWorkerSupported) {
      alert(
        "Tr√¨nh duy·ªát n√†y kh√¥ng h·ªó tr·ª£ Service Worker, kh√¥ng th·ªÉ th·ª≠ Push Notification."
      );
      return;
    }

    // Ph·∫ßn n√†y v·∫´n c·∫ßn server-side logic ƒë·ªÉ g·ª≠i Push Notification
    alert(
      "ƒê·ªÉ th·ª±c hi·ªán 'Test React Push Notification', b·∫°n c·∫ßn m·ªôt Backend ƒë·ªÉ g·ª≠i Push Notification theo chu·∫©n Web Push Protocol ƒë·∫øn Service Worker ƒë√£ ƒëƒÉng k√Ω."
    );
    console.log("ƒê·ªÉ th·ª±c hi·ªán 'Test React Push Notification':");
    console.log("- ƒêƒÉng k√Ω Push Subscription cho ng∆∞·ªùi d√πng."); // C·∫ßn g·ªçi navigator.serviceWorker.ready.then(reg => reg.pushManager.subscribe(...))
    console.log("- G·ª≠i Push Message t·ª´ server ƒë·∫øn Service Worker.");
    console.log("Service Worker s·∫Ω x·ª≠ l√Ω v√† hi·ªÉn th·ªã th√¥ng b√°o.");

    // V√≠ d·ª• s∆° l∆∞·ª£c v·ªÅ c√°ch service worker c√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o ngay l·∫≠p t·ª©c
    // (ƒê√¢y kh√¥ng ph·∫£i l√† push th·∫≠t s·ª± t·ª´ server, m√† l√† t·∫°o th√¥ng b√°o t·ª´ client qua SW)
    if (Notification.permission === "granted" && serviceWorkerSupported) {
      showNotificationViaServiceWorker(
        "React Push Test (SW)",
        "ƒê√¢y l√† th√¥ng b√°o ƒë·∫©y m√¥ ph·ªèng t·ª´ Service Worker!",
        "https://via.placeholder.com/64?text=SW",
        "react-push-test"
      );
    } else if (Notification.permission === "denied") {
      alert(
        "Quy·ªÅn th√¥ng b√°o b·ªã t·ª´ ch·ªëi. Kh√¥ng th·ªÉ g·ª≠i push qua Service Worker."
      );
    } else {
      const permission = await requestPermission();
      if (permission === "granted") {
        testReactPushNotification(); // Th·ª≠ l·∫°i sau khi c·∫•p quy·ªÅn
      } else {
        alert("Kh√¥ng th·ªÉ g·ª≠i push v√¨ quy·ªÅn ch∆∞a ƒë∆∞·ª£c c·∫•p.");
      }
    }
  };

  // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
  if (error) {
    return (
      <div style={{ padding: "20px", fontFamily: "Arial, sans-serif" }}>
        <h2>Notification Test</h2>
        <div
          style={{
            background: "#f8d7da",
            border: "1px solid #f5c6cb",
            padding: "15px",
            borderRadius: "5px",
            color: "#721c24",
          }}
        >
          <strong>‚ùå L·ªói:</strong> {error}
        </div>
      </div>
    );
  }

  return (
    <div
      className="page"
      style={{ padding: "20px", fontFamily: "Arial, sans-serif" }}
    >
      <h2>Notification Test</h2>

      {/* Th√¥ng b√°o cho iOS */}
      {isIOS && (
        <div
          style={{
            background: "#fff3cd",
            border: "1px solid #ffeaa7",
            padding: "15px",
            borderRadius: "5px",
            marginBottom: "20px",
            color: "#856404",
          }}
        >
          <strong>‚ö†Ô∏è iOS Safari:</strong> Web Notifications **kh√¥ng ƒë∆∞·ª£c h·ªó
          tr·ª£**. ƒê·ªÉ c√≥ th√¥ng b√°o ƒë·∫©y tr√™n iOS, b·∫°n c·∫ßn tri·ªÉn khai **Push
          Notifications v·ªõi Service Worker v√† APNs (Apple Push Notification
          service)**, ƒëi·ªÅu n√†y ph·ª©c t·∫°p h∆°n nhi·ªÅu.
        </div>
      )}

      {/* Th√¥ng b√°o cho mobile Android */}
      {isMobile && !isIOS && (
        <div
          style={{
            background: "#d4edda",
            border: "1px solid #c3e6cb",
            padding: "15px",
            borderRadius: "5px",
            marginBottom: "20px",
            color: "#155724",
          }}
        >
          <strong>üì± Mobile (Android):</strong> Th√¥ng b√°o web ƒë∆∞·ª£c h·ªó tr·ª£. N·∫øu
          kh√¥ng th·∫•y th√¥ng b√°o, h√£y ki·ªÉm tra c√†i ƒë·∫∑t quy·ªÅn th√¥ng b√°o c·ªßa tr√¨nh
          duy·ªát c·ªßa b·∫°n.
        </div>
      )}

      <div style={{ marginBottom: "20px" }}>
        <strong>Tr·∫°ng th√°i quy·ªÅn:</strong> {permissionStatus}
        <br />
        <strong>Thi·∫øt b·ªã:</strong>{" "}
        {isMobile ? (isIOS ? "iOS" : "Android") : "M√°y t√≠nh ƒë·ªÉ b√†n"}
        <br />
        <strong>H·ªó tr·ª£ Web Notification:</strong>{" "}
        {notificationSupported ? "C√≥" : "Kh√¥ng (tr√™n iOS Safari)"}
        <br />
        <strong>H·ªó tr·ª£ Service Worker:</strong>{" "}
        {serviceWorkerSupported ? "C√≥" : "Kh√¥ng"}
      </div>

      <div style={{ marginBottom: "10px" }}>
        <button
          onClick={requestPermission}
          style={{ padding: "10px 20px", marginRight: "10px" }}
          // V√¥ hi·ªáu h√≥a n·∫øu kh√¥ng h·ªó tr·ª£ Web Notification ho·∫∑c ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn
          disabled={!notificationSupported || permissionStatus === "granted"}
        >
          {permissionStatus === "granted"
            ? "ƒê√£ c·∫•p quy·ªÅn"
            : "Y√™u c·∫ßu c·∫•p quy·ªÅn"}
        </button>
      </div>

      <div style={{ marginBottom: "10px" }}>
        <button
          onClick={testSimpleNotification}
          style={{ padding: "10px 20px", marginRight: "10px" }}
          // Ch·ªâ k√≠ch ho·∫°t n·∫øu c√≥ h·ªó tr·ª£ Web Notification V√Ä Service Worker
          disabled={!notificationSupported || !serviceWorkerSupported}
        >
          Test Th√¥ng b√°o ƒê∆°n gi·∫£n (qua SW)
        </button>
      </div>

      <div style={{ marginBottom: "10px" }}>
        <button
          onClick={testMinimalNotification}
          style={{
            padding: "10px 20px",
            marginRight: "10px",
            backgroundColor: "#ff4444",
            color: "white",
            border: "none",
            borderRadius: "4px",
          }}
          // Ch·ªâ k√≠ch ho·∫°t n·∫øu c√≥ h·ªó tr·ª£ Web Notification V√Ä Service Worker
          disabled={!notificationSupported || !serviceWorkerSupported}
        >
          Test Th√¥ng b√°o T·ªëi thi·ªÉu (qua SW)
        </button>
      </div>

      {/* N√∫t n√†y li√™n quan ƒë·∫øn Push API v√† Service Worker */}
      <div style={{ marginBottom: "10px" }}>
        <button
          onClick={testReactPushNotification}
          style={{
            padding: "10px 20px",
            marginRight: "10px",
            backgroundColor: "#007bff", // M√†u xanh d∆∞∆°ng cho Push Notification
            color: "white",
            border: "none",
            borderRadius: "4px",
          }}
          // K√≠ch ho·∫°t n·∫øu Service Worker ƒë∆∞·ª£c h·ªó tr·ª£
          disabled={!serviceWorkerSupported}
        >
          Test React Push Notification (C·∫ßn SW & Backend)
        </button>
      </div>

      <div style={{ marginTop: "20px", fontSize: "14px", color: "#666" }}>
        <strong>Th√¥ng tin Debug:</strong>
        <br />- URL hi·ªán t·∫°i: {window.location.href}
        <br />- Giao th·ª©c: {window.location.protocol}
        <br />- T√™n m√°y ch·ªß: {window.location.hostname}
        <br />- User Agent: {navigator.userAgent}
        <br />- HTTPS: {window.location.protocol === "https:" ? "C√≥" : "Kh√¥ng"}
        <br />- Localhost:{" "}
        {window.location.hostname === "localhost" ||
        window.location.hostname === "127.0.0.1"
          ? "C√≥"
          : "Kh√¥ng"}
        <br />- API Notification h·ªó tr·ª£:{" "}
        {typeof Notification !== "undefined" ? "C√≥" : "Kh√¥ng"}
        <br />- ServiceWorker h·ªó tr·ª£:{" "}
        {"serviceWorker" in navigator ? "C√≥" : "Kh√¥ng"}
        <br />-{" "}
        <strong
          style={{
            color:
              window.location.protocol === "https:" ||
              window.location.hostname === "localhost" ||
              window.location.hostname === "127.0.0.1"
                ? "green"
                : "red",
          }}
        >
          Th√¥ng b√°o Web s·∫Ω ho·∫°t ƒë·ªông:{" "}
          {window.location.protocol === "https:" ||
          window.location.hostname === "localhost" ||
          window.location.hostname === "127.0.0.1"
            ? "C√ì"
            : "KH√îNG - C·∫ßn HTTPS ho·∫∑c localhost"}
        </strong>
      </div>

      <div style={{ marginTop: "20px", fontSize: "12px", color: "#999" }}>
        <strong>Console Log:</strong> M·ªü F12 ‚Üí Console ƒë·ªÉ xem th√¥ng b√°o debug
      </div>
    </div>
  );
}

export default App;
